Each endpoint uses the following resources:

* Unix domain socket (UDS)
* Conns directory containing:
  - Per connection subdirectory containing:
    - mmapped MSG receive buffer
    - mmapped MSG receive ring
    - MMAP RMA buffer (optional)

The sm transport uses the UDS for connection setup.  During connection setup,
the peers will exchange information including the connection ID, if FD support
is requested, and information for RMA support and handling.

The endpoint URI will be:

sm://path/pid/id

where path is a valid, absolute directory path in the file system, the pid is
the process id of the caller to cci_init(), and id is the id of endpoint. The
complete URI without the sm:// prefix is a directory which includes the UDS
socket file and the conns subdirectory. The MMAP RAM buffer, if used, will use a
file-backed mmapped buffer.

For example, the URI "sm:///tmp/cci/sm/4567/2" represents a directory at:

/tmp/cci/sm/4567/2/

which will include these files:

sock
fifo
conns/[conn_id]

Using the directory for the resources allows for easier cleanup internally as
well as by users and/or admins.

The socket will use the SOCK_DGRAM to allow connection handshake messages to be
sent without the need to maintain message markers for each connection. While UDS
datagrams are reliable, we will need to maintain timeouts and attempt
retransmission as needed. The messages are 8 bytes. The server will determine
the client's URI from the sockaddr_un's sun_path (less the /sock suffix). Thus,
the connect_request will only contain version and optional payload length as
well as the client-assigned server ID. The reply and ack messages include both
the client-assigned server ID and the server-assigned client ID.

The sm transport uses a per-connection, mmapped ring buffer for headers and a
separate payload buffer. The mmap ring has lower latency than UDS datagram
sockets or a FIFO. The ring uses compare-and-swap to provide lock-free
synchromization that can support multiple threads. By default, the sm transport
polls the connection ring buffers looking for new headers. The endpoint's FIFO
is used for keepalive messages (to detect closed peers) and to wake a peer that
has requested wakeup notifications. The 4-byte FIFO headers will include the
message type and sending peer's peer_id.

All headers sent over the mmap ring must be 4-bytes and the first four bits in
the header must be the header type. Using a per-peer ring, messages will not
need a peer ID in every message nor a look up of the ID on the receiver.

A sender reserves one or more cache lines in the MMAP send buffer, memcpy()s the
payload to those lines, prepares the header including the offset, writes the
header to the receiver's ring, and generates the SEND event. The receiver will
dequeue the header and generate a RECV event. When the event is returned, the
receiver will release the reserved buffer bits.

We will ignore SIGPIPE and rely on EPIPE when writing keepalive or wakeup
messages to the peer's FIFO to detect when a peer has shutdown.

RMA is handled by one of the these methods (in this order of preference):

* KNEM (Linux 2.6.18+ only)
* cross-memory attach (CMA) (Linux 3.5+ only)
* mmap

If either KNEM or CMA exist, then RMAs will be handled solely by the initiator
without sending a RMA header to the target. If not, the initiator will send a
RMA header and descriptor to the target using the FIFO. The target will parse
the header and descriptor, handle accordingly, and send the response (see below
description). The RMA payload will be transferred using the MMAP buffer of the
initiator and the target will perform the memcpy().

Each RMA fragment will have a self-describing header. The payload will start on
the next cacheline.

* RMA Write

- KNEM

- CMA

- MMAP

The initiator reserves N+1 cachelines in the RMA buffer. It writes the RMA
header into the first slot and the payload into the remaining slots. It packs
the sm_hdr_t and writes it to the target's FIFO.

The target reads the header and then reads the inline RMA header from the first
slot. It looks up the RMA handle and verifies it. It then memcpy()s the data
from the sender's RMA buffer to the destination buffer. Lastly, it packs the RMA
ack and writes it to the initiator's FIFO.

The initiator reads the ack from the FIFO, looks up the sm_rma_t * from the
first slot, and completes the fragment.

* RMA Read

- KNEM

- CMA

- MMAP

The initiator reserves N+1 cachelines in the RMA buffer. It writes the RMA
header into the first slot and reserves the remaining slots for the target. It
packs the sm_hdr_t and writes it to the target's FIFO.

The target reads the header and then reads the inline RMA header from the first
slot. It looks up the RMA handle and verifies it. It them memcpy()s the data
from its memory to the sender's RMA buffer. Lastly, it packs the RMA ack and
writes it to the initiator's FIFO.

The initiator reads the ack from the FIFO, looks up the sm_rma_t * from the
first slot, memcpy()s the data to the local buffer, and completes the fragment.

